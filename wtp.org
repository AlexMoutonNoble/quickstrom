#+TITLE: WebCheck
#+AUTHOR: Oskar Wickstr√∂m
#+STARTUP: latexpreview
#+LATEX_HEADER_EXTRA:\usepackage{libertine}

* Introduction

This is a design document for my web testing platform, tentatively
named $\hbox{WebCheck}$. It describes the motivation and design of a temporal
logic used to specify the behavior of web applications. Further, it
describes the design of tools used to check that web applications
satisfy such specifications.

* Temporal Logic of Web Applications

In WebCheck, the behavior of a web application is specified using the
/temporal logic of web applications/ (TLWA).  It's a first-order
temporal logic, heavily inspired by TLA+ and LTL, most notably adding
web-specific operators. Let's have a look at what if offers!

** Syntax

- From propositional logic we have the atoms and the logical
  connectives:
    - $\mathit{true}$ :: A proposition that is true.
    - $\mathit{false}$ :: A proposition that is false.
    - $\lnot$ :: The unary operator /not/.
    - $\wedge$ :: The binary /and/ operator, also known as /logical conjunction/.
    - $\vee$ :: The binary /or/ operator, also known as /logical disjunction/.
- From first-order logic, we have the universal and existential
  quantifiers:
    - $\forall x : p$ :: Universal quantification, or /for all/.
    - $\exists x : p$ :: Existential quantification, or /there exists/.
- The temporal operators affects the temporal mode of a proposition:
    - $\mathit{next}\ p$ :: In the next state, the proposition $p$ must hold.
    - $\mathit{always}\ p$ :: In all future states, including the current
        state, the proposition $p$ must hold.
- The web-specific operators allows for querying the DOM and the state
  of DOM elements:
    - $\mathit{query}(\mathit{selector})$ :: All elements in the DOM
         matching a CSS selector.
    - $\mathit{.text}$ :: Text content of an element.
    - $\mathit{.attributes}(\mathit{name})$ :: Value of an element's attribute named $\mathit{name}$.
    - $\mathit{.styles}(\mathit{name})$ :: Computed CSS value of an element's style named $\mathit{name}$.
    - $\mathit{.visible}$ :: Is an element visible?
- Sets and sequences are defined using literals, and set
  comprehensions allow filtering sequences and sets into
  new sets:
  - $\{x_1, x_2, ..., x_n\}$ :: defines a set containing values of the
       comma-separated forms ($x_1$, $x_2$, and so on)
  - $[x_1, x_2, ..., x_n]$ :: defines a sequence containing values
       of the comma-separated forms ($x_1$, $x_2$, and so on)
  - $\{x \in S : y\}$ :: defines a set including each $x$ in the set $S$ where $y$ is true

** Example: Deleting Drafts
   
In this example, we have a list of drafts that can be deleted. The user
selects one or more drafts, by checking the corresponding checkboxes,
and clicks "Delete". A confirmation dialog is shown, and the user can
either cancel or confirm the deletion.

We want to show that when drafts are selected for deletion and the user
has clicked "Delete", entering the $\textit{confirming}$ state, the
deletion is either:

1. /cancelled/, meaning that no drafts are deleted, the same set of
   drafts are selected, and the confirmation dialog is hidden, or
2. /confirmed/, meaning that the set of selected drafts are deleted from
   the drafts list and that the confirmation dialog is hidden

These are the only two valid actions when in the $\textit{confirming}$
state.

*** A Specification using TLWA

The following formula defines the $\textit{confirming}$ state as the
existence of an element $e$ returned by querying the current DOM for the
CSS selector $\mathtt{confirm}$, that is visible and has the text
content "Are you sure?".

\begin{equation}
\mathit{confirming} = \exists e \in \mathit{query}(\text{".confirm"}) : \mathit{e}.\mathrm{visible} \wedge \mathit{e}.\mathrm{text} = \text{"Are you sure?"} \\
\end{equation}

We also need the checkbox elements in the DOM:

\begin{equation}
\mathit{checkboxes} = \mathit{query}(\text{".checkbox"})
\end{equation}

We can now define the $\mathit{cancel}$ action. It says that the set
of drafts (or their checkboxes, rather) are the same in the current
and next state, that the same checkboxes are checked, and that we're
no longer $\mathit{confirming}$ in the next state.

\begin{equation}
\begin{aligned}
\mathit{cancel} =\ & \mathit{checkboxes} = \mathit{next}(\mathit{checkboxes}) \\
  & \wedge \{c \in \mathit{checkboxes} : \mathit{c}\mathit{.checked} \} = \mathit{next}(\{c \in \mathit{checkboxes} : \mathit{c}\mathit{.checked} \}) \\
  & \wedge \mathit{next}(\lnot \mathit{confirming}) \\
\end{aligned}
\end{equation}

The $\mathit{confirm}$ action is the other possibility. It says that the
resulting set of checkboxes is equal to the currently non-checked ones,
and that we're no longer $\mathit{confirming}$ in the next state.

\begin{equation}
\begin{aligned}
\mathit{confirm} =\ & \{c \in \mathit{checkboxes} : \lnot \mathit{c}\mathit{.checked} \} = \mathit{next}(\mathit{checkboxes}) \\
  & \wedge \mathit{next}(\lnot \mathit{confirming}) \\
\end{aligned}
\end{equation}

Finally, we can compose our building blocks to define the safety
property. At all times ($\mathit{always}$), when we're confirming the
deletion of selected drafts, we can either $\mathit{cancel}$ or
$\mathit{confirm}$.

\begin{equation}
\mathit{always} (\mathit{confirming} \implies \mathit{cancel} \vee \mathit{confirm})
\end{equation}

That's it. We've now specified the safety property of the draft deletion
functionality using TLWA.

* Reading material

- [[http://santos.cs.ksu.edu/esscass04/papers/patterns-survey.pdf][LTL
  patterns survey]]
- [[https://lamport.azurewebsites.net/pubs/intro-to-tla.pdf][Intro to
  TLA]]
- [[https://www.microsoft.com/en-us/research/uploads/prod/2016/12/Specifying-Concurrent-Systems-with-TLA.pdf][Specifiying
  Concurrent Systems with TLA+]]
